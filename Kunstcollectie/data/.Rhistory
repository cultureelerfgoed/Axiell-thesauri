library(spacyr)
spacy_install("nl")
library(spacyr)
spacy_install("nl")
library(jsonlite)
library(rjson)
library(data.table)
library(httr)
library(curl)
library(tibble)
setwd("C:\\Users\\Ruben\\Documents\\05. RCE")
url <- "https://api.linkeddata.cultureelerfgoed.nl/datasets/ruben-schalk/cht-dump/services/cht-dump/sparql"
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT ?hostname (count(?term) as ?number_of_links) WHERE {
SERVICE <http://vocab.getty.edu/sparql> {
?term a gtv:Concept .
?term skos:exactMatch ?exactmatch
}
FILTER(!regex(?exactmatch, "getty"))
bind(strbefore(strafter(str(?exactmatch),"//"),"/") as ?hostname)
}
ORDER BY DESC(?number_of_links)'
)
response <- POST(url, body = body, encode = "json")
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT ?hostname (count(?term) as ?number_of_links) WHERE {
SERVICE <http://vocab.getty.edu/sparql> {
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
'
)
response <- POST(url, body = body, encode = "json")
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
url <- "https://api.linkeddata.cultureelerfgoed.nl/datasets/ruben-schalk/cht-dump/services/cht-dump/sparql"
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT ?hostname (count(?term) as ?number_of_links) WHERE {
SERVICE <http://vocab.getty.edu/sparql> {
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
'
)
url <- "https://api.linkeddata.cultureelerfgoed.nl/datasets/ruben-schalk/cht-dump/services/cht-dump/sparql"
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
SERVICE <http://vocab.getty.edu/sparql> {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
}'
)
response <- POST(url, body = body, encode = "json")
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
SERVICE <http://vocab.getty.edu/sparql> {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
}}'
)
response <- POST(url, body = body, encode = "json")
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
SERVICE <http://vocab.getty.edu/sparql> {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
}
}'
)
response <- POST(url, body = body, encode = "json")
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
url <- "http://vocab.getty.edu/sparql"
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
}'
)
response <- POST(url, body = body, encode = "json")
response <- POST(url, body = body, encode = "json")
content <- content(response, "parsed")
content <- content(response, "raw")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
content <- content(response, "text")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
response <- POST(url, body = body, encode = "json", content_type("application/sparql-query"))
content <- content(response, "text")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
}'
)
response <- POST(url, body = body, encode = "json", content_type("application/sparql-query"))
response <- POST(url, body = body, encode = "json", content_type("application/sparql-query"))
content <- content(response, "text")
content <- content(response, "text")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
url <- "https://api.data.muziekweb.nl/datasets/MuziekwebOrganization/Muziekweb/services/Muziekweb/sparql"
query <- "PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?hostname (count(?hostname) as ?unique_domains)
WHERE {
?term owl:sameAs ?obj .
bind(strbefore(strafter(str(?obj), '://'), '/') as ?hostname)
FILTER(?hostname != '')
}
ORDER BY DESC(?unique_domains)
LIMIT 20"
response <- POST(url, body = list(query = query), encode = "json")
# retrieve response and convert to data.frame
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
url <- "https://api.data.muziekweb.nl/datasets/MuziekwebOrganization/Muziekweb/services/Muziekweb/sparql"
query <- "PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (count(distinct(?term) as ?n) (count(?obj) as ?unique_domains)
WHERE {
?term owl:sameAs ?obj .
bind(strbefore(strafter(str(?obj), '://'), '/') as ?hostname)
FILTER(?hostname != '')
}
#ORDER BY DESC(?unique_domains)
LIMIT 20"
response <- POST(url, body = list(query = query), encode = "json")
# retrieve response and convert to data.frame
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
print(df)
url <- "https://api.data.muziekweb.nl/datasets/MuziekwebOrganization/Muziekweb/services/Muziekweb/sparql"
query <- "PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (count(distinct(?term)) as ?n) (count(?obj) as ?unique_domains)
WHERE {
?term owl:sameAs ?obj .
bind(strbefore(strafter(str(?obj), '://'), '/') as ?hostname)
FILTER(?hostname != '')
}
#ORDER BY DESC(?unique_domains)
LIMIT 20"
response <- POST(url, body = list(query = query), encode = "json")
# retrieve response and convert to data.frame
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
setwd("C:\\Users\\Ruben\\Documents\\05. RCE")
begroting <- ("voorbeeld begroting tbv Nathanyel.xlsx")
begroting <- read_xlsx("voorbeeld begroting tbv Nathanyel.xlsx")
library(readxl)
begroting <- read_excel("voorbeeld begroting tbv Nathanyel.xlsx")
begroting <- read_excel("voorbeeld begroting tbv Nathanyel.xlsx", sheet = "Beoordeeld")
View(begroting)
begroting <- read_excel("voorbeeld begroting tbv Nathanyel.xlsx", sheet = "Beoordeeld", skip = 8, col_names = 9)
begroting <- read_excel("voorbeeld begroting tbv Nathanyel.xlsx", sheet = "Beoordeeld", skip = 8)
# Set column names from the 9th row
col_names <- readxl::read_excel("your_file.xlsx", sheet = "Sheet1", range = cell_cols(), n_max = 1, skip = 8)
# Set column names from the 9th row
col_names <- readxl::read_excel("voorbeeld begroting tbv Nathanyel.xlsx", sheet = "Beoordeeld", range = cell_cols(), n_max = 1, skip = 8)
View(begroting)
setDT(begroting)
colnames(begroting)
begroting[grep("Subtotaal", "STABU-code en omschrijving" ),]
begroting[grepl("Subtotaal", "STABU-code en omschrijving" ),]
setnames(begroting, gsub(" ", "_", colnames(begroting)))
library(data.table)
setnames(begroting, gsub(" ", "_", colnames(begroting)))
colnames(begroting)
setnames(begroting, gsub("/" ", "", colnames(begroting)))
setnames(begroting, gsub('"', '', colnames(begroting)))
colnames(begroting)
setDT(begroting)
begroting[grepl("Subtotaal", `STABU-code_en_omschrijving`),]
begroting[grepl("Subtotaal", `STABU-code_en_omschrijving`), sum(TOTAAL)]
begroting[grepl("Subtotaal 46", `STABU-code_en_omschrijving`), sum(TOTAAL)] # 175,496.00
begroting$TOTAAL <- as.numeric(begroting$TOTAAL )
begroting[grepl("Subtotaal", `STABU-code_en_omschrijving`), sum(TOTAAL)] # 175,496.00
begroting[grepl("Subtotaal 46", `STABU-code_en_omschrijving`), sum(TOTAAL)] # 105,111.00
begroting$TOTAAL <- as.integer(begroting$TOTAAL )
begroting[grepl("Subtotaal", `STABU-code_en_omschrijving`), sum(TOTAAL)] # 175,496.00
begroting[grepl("Subtotaal 46", `STABU-code_en_omschrijving`), sum(TOTAAL)] # 105,111.00
begroting$TOTAAL <- as.numeric(begroting$TOTAAL )
begroting[grepl("TOTAAL GENERAAL", begroting), sum(TOTAAL)]
begroting[`Onderaan-neming`,]
begroting[, .("Onderaan-neming")]
x <- begroting[, .("Onderaan-neming")]
x <- subset(begroting, select = "Onderaan-neming")
View(x)
begroting <- read_excel("voorbeeld begroting tbv Nathanyel.xlsx", sheet = "Beoordeeld", skip = 8)
warnings()
begroting <- read_xlsx("voorbeeld begroting tbv Nathanyel.xlsx", sheet = "Beoordeeld", skip = 8)
setDT(begroting)
View(begroting)
# Replace "your_file.xlsx" with the actual file path
file_path <- "voorbeeld begroting tbv Nathanyel.xlsx.xlsx"
# Use col_types to specify the column types
# "c" stands for character, "d" for double (numeric), and "i" for integer
# "skip" is used for columns where the type should be determined automatically
# You can customize the column types based on your data
col_types <- readxl::col_types(readxl::xls_col_types(file_path), sheet = "Beoordeeld",
col_types = "skip",
guess_max = 1000)
# Use col_types to specify the column types
# "c" stands for character, "d" for double (numeric), and "i" for integer
# "skip" is used for columns where the type should be determined automatically
# You can customize the column types based on your data
data <- readxl(file_path, sheet = "Beoordeeld", col_types = "text")
# Use col_types to specify the column types
# "c" stands for character, "d" for double (numeric), and "i" for integer
# "skip" is used for columns where the type should be determined automatically
# You can customize the column types based on your data
data <- read_xlsx(file_path, sheet = "Beoordeeld", col_types = "text")
# Replace "your_file.xlsx" with the actual file path
file_path <- "voorbeeld begroting tbv Nathanyel.xlsx"
# Use col_types to specify the column types
# "c" stands for character, "d" for double (numeric), and "i" for integer
# "skip" is used for columns where the type should be determined automatically
# You can customize the column types based on your data
data <- read_xlsx(file_path, sheet = "Beoordeeld", col_types = "text")
View(begroting)
colnames(data)
View(data)
# Use col_types to specify the column types
# "c" stands for character, "d" for double (numeric), and "i" for integer
# "skip" is used for columns where the type should be determined automatically
# You can customize the column types based on your data
data <- read_xlsx(file_path, sheet = "Beoordeeld", col_types = "text", skip = 8)
# Use col_types to specify the column types
# "c" stands for character, "d" for double (numeric), and "i" for integer
# "skip" is used for columns where the type should be determined automatically
# You can customize the column types based on your data
begroting <- read_xlsx(file_path, sheet = "Beoordeeld", col_types = "text", skip = 8)
setDT(begroting)
setnames(begroting, gsub(" ", "_", colnames(begroting)))
setnames(begroting, gsub('"', '', colnames(begroting)))
colnames(begroting)
begroting[grepl("TOTAAL GENERAAL", begroting), sum(TOTAAL)]
# TOTAAL GENERAAL = 237,620
# Find rows where "TOTAAL GENERAAL" is present in any column
rows_with_string <- your_data_table[, any(grepl("TOTAAL GENERAAL", .SD)), .(row = .I)]
# TOTAAL GENERAAL = 237,620
# Find rows where "TOTAAL GENERAAL" is present in any column
rows_with_string <- begroting[, any(grepl("TOTAAL GENERAAL", .SD)), .(row = .I)]
# TOTAAL GENERAAL = 237,620
# Find rows where "TOTAAL GENERAAL" is present in any column
rows_with_string <- begroting[, .I[any(grepl("TOTAAL GENERAAL", .SD))], by = 1:nrow(your_data_table)]
# TOTAAL GENERAAL = 237,620
# Find rows where "TOTAAL GENERAAL" is present in any column
rows_with_string <- begroting[, .I[any(grepl("TOTAAL GENERAAL", .SD))], by = 1:nrow(begroting)]
# Extract values from "TOTAAL" column for the matching rows
result <- begroting[rows_with_string$V1, .(TOTAAL)]
View(result)
# Extract values from "TOTAAL" column for the matching rows
begroting[rows_with_string$V1, .(TOTAAL)]
View(rows_with_string)
begroting[, .I[any(grepl("TOTAAL GENERAAL", .SD))], by = 1:nrow(begroting)]
begroting[, .I[any(grepl("TOTAAL GENERAAL", .SD))], by = 1:nrow(begroting)]
begroting[, .(TOTAAL[any(grepl("TOTAAL GENERAAL", .SD))]), by = 1:nrow(your_data_table)]
begroting[, .(TOTAAL[any(grepl("TOTAAL GENERAAL", .SD))]), by = 1:nrow(begroting)]
begroting[, .(TOTAAL[any(grepl("TOTAAL GENERAAL", .SD))]), by = .(V1 = 1:nrow(begroting))]
begroting[, .(TOTAAL[any(grepl("TOTAAL GENERAAL", .SD))]), by = 1:nrow(begroting)][, .(V1)]
begroting[, .(TOTAAL[any(grepl("TOTAAL GENERAAL", .SD))]), by = 1:nrow(begroting)][, .(V1)] # 237619.6177030406
library(data.table)
setwd("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\Kunstcollectie\data")
setwd("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\Kunstcollectie\\data")
vervaardigers <- fread("Vervaardigers-Objecten-in-eigen-beheer(KC)_reconciled.tsv")
setDT(vervaardigers)
View(vervaardigers)
vervaardigers[!is.na(rkd_id_reconciliation) && !is.na(rkd_id_digital_reference), rkd_id_reconciliation == rkd_id_digital_reference,]
vervaardigers[!is.na(rkd_id_reconciliation) && !is.na(rkd_id_digital_reference), .N, rkd_id_reconciliation == rkd_id_digital_reference,]
vervaardigers[!is.na(rkd_id_digital_reference), .N]
library(stringi)
library(stringr)
vervaardigers[str_extract(digital_reference, "artists/(.+)"),]
str_extract(digital_reference, "artists/(.+)")
str_extract(vervaardigers$digital_reference, "artists/(.+)")
str_extract(vervaardigers$digital_reference, ""(?<=artists/).+"")
str_extract(vervaardigers$digital_reference, "(?<=artists/).+")
vervaardigers$digital_reference <- str_extract(vervaardigers$digital_reference, "(?<=artists/).+")
View(vervaardigers)
vervaardigers <- fread("Vervaardigers-Objecten-in-eigen-beheer(KC)_reconciled.tsv")
vervaardigers$rkd_id_digital_reference <- str_extract(vervaardigers$digital_reference, "(?<=artists/).+")
View(vervaardigers)
vervaardigers[!is.na(rkd_id_digital_reference), .N]
vervaardigers[!is.na(rkd_id_reconciliation) && !is.na(rkd_id_digital_reference), .N, rkd_id_reconciliation == rkd_id_digital_reference,]
vervaardigers[, .N, rkd_id_reconciliation == rkd_id_digital_reference,]
vervaardigers <- fread("Vervaardigers-Objecten-in-eigen-beheer(KC)_reconciled.tsv")
vervaardigers$rkd_id_digital_reference <- str_extract(vervaardigers$digital_reference, "(?<=artists/).+")
vervaardigers <- fread("Vervaardigers-Objecten-in-eigen-beheer(KC)_reconciled.tsv")
setDT(vervaardigers)
vervaardigers$rkd_id_digital_reference <- str_extract(vervaardigers$digital_reference, "(?<=artists/).+")
View(vervaardigers)
vervaardigers[!is.na(rkd_id_digital_reference), .N]
vervaardigers[!is.na(rkd_id_reconciliation), .N]
vervaardigers[rkd_id_reconciliation == rkd_id_digital_reference, .N]
vervaardigers[!is.na(rkd_id_digital_reference) && !is.na(rkd_id_reconciliation, rkd_id_reconciliation == rkd_id_digital_reference, .N] # 659
vervaardigers[!is.na(rkd_id_digital_reference) && !is.na(rkd_id_reconciliation), rkd_id_reconciliation == rkd_id_digital_reference, .N] # 659
vervaardigers[!is.na(rkd_id_digital_reference) && !is.na(rkd_id_reconciliation) && rkd_id_reconciliation == rkd_id_digital_reference, .N] # 659
vervaardigers[!is.na(rkd_id_digital_reference) && !is.na(rkd_id_reconciliation), .N] # 659
vervaardigers[!is.na(rkd_id_digital_reference) & !is.na(rkd_id_reconciliation), .N] # 659
vervaardigers[!is.na(rkd_id_digital_reference) & !is.na(rkd_id_reconciliation), .N, && rkd_id_reconciliation == rkd_id_digital_reference] # 659
vervaardigers[!is.na(rkd_id_digital_reference) & !is.na(rkd_id_reconciliation), .N, rkd_id_reconciliation == rkd_id_digital_reference] # 659
vervaardigers[!is.na(rkd_id_digital_reference) & !is.na(rkd_id_reconciliation), rkd_id_reconciliation != rkd_id_digital_reference] # 659
vervaardigers[!is.na(rkd_id_digital_reference) & !is.na(rkd_id_reconciliation),
rkd_id_match := ifelse(rkd_id_reconciliation == rkd_id_digital_reference, TRUE, FALSE)] # 659
vervaardigers[, .N, rkd_id_match]
different <- vervaardigers[rkd_id_match == FALSE]
View(different)
vervaardigers[, .N, by = rkd_id_match]
vervaardigers[!is.na(rkd_id_reconciliation) & is.na(rkd_id_digital_reference), .N]
library(xlsx)
write.xlsx(vervaardigers, "Vervaardigers-Objecten-in-eigen-beheer(KC)_resultaten.xlsx")
fwrite(vervaardigers, "Vervaardigers-Objecten-in-eigen-beheer(KC)_resultaten.csv")
View(vervaardigers)
str_extract(vervaardigers$digital_reference, "artists/")
result <- sub(".*/", "", vervaardigers$digital_reference)
sub(".*/", "", vervaardigers$digital_reference)
sub(".*artists/", "", vervaardigers$digital_reference)
sub("artists/", "", vervaardigers$digital_reference)
sub(".*artists/", "", vervaardigers$digital_reference)
