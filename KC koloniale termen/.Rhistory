}
}
View(example)
# Loop through each data frame in the list
for (i in seq_along(begrotingen)) {
# Check if the specified character is present in the specified position
if (nrow(begrotingen[[i]]) >= 6 && ncol(begrotingen[[i]]) >= 26 &&
begrotingen[[i]][6, 26] == "1208133") {
# If a match is found, save the data frame as "example" and break out of the loop
example <- begrotingen[[i]]
break
}
}
View(example)
# Subtotaal van alle werkzaamheden
random_df[2106,8]
# Subtotaal van alle werkzaamheden
random_df[2106,11]
# Subtotaal van alle werkzaamheden
random_df[2106,25]
# Subtotaal van alle werkzaamheden
random_df[2105,25]
# Subtotaal van alle werkzaamheden
example[2106,11]
# subtotaal 46
example[1657, 11] # 10511
# subtotaal 46
example[1657, 25] # 10511
random_df[1657,25]
# Subtotaal van alle werkzaamheden
example[2106,25]
# Subtotaal van alle werkzaamheden
example[2180,25] # 175,496
# Subtotaal van alle werkzaamheden
example[21,25] # 175,496
# Subtotaal van alle werkzaamheden
example[1657,25] # 175,496
# subtotaal 46
example[1657, 25] # 10511
# Subtotaal van alle werkzaamheden
example[2107,25] # 175,496
# TOTAAL GENERAAL
example[2180,25]
# zaaknummer
example[6,26]
### loop through all sheets
# Initialize an empty list to store the results
result_list <- list()
# Iterate through each data frame in the list
for (i in 1:length(begrotingen)) {
df <- begrotingen[[i]]
# Create a new data frame for each iteration
dataframe <- data.frame(
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25],
zaaknummer = df[6, 26]
)
# Store the result in the list
result_list[[i]] <- dataframe
}
View(result_list)
library(dplyr)
### loop through all sheets
# Initialize an empty list to store the results
result_list <- list()
# Iterate through each data frame in the list
for (i in 1:length(begrotingen)) {
df <- begrotingen[[i]]
# Create a new data frame for each iteration
dataframe <- data.frame(
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25],
zaaknummer = df[6, 26]
)
# Bind the row to the result_df
result_df <- bind_rows(result_df, row)
}
result_df <- NULL
result_df <- dataframe()
result_df <- data.frame()
# Iterate through each data frame in the list
for (i in 1:length(begrotingen)) {
df <- begrotingen[[i]]
# Create a new data frame for each iteration
dataframe <- data.frame(
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25],
zaaknummer = df[6, 26]
)
# Bind the row to the result_df
result_df <- bind_rows(result_df, row)
}
extract_values <- function(df) {
row <- data.frame(
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25],
zaaknummer = df[6, 26]
)
return(row)
}
# Use lapply to apply the function to each data frame in the list
result_list <- lapply(begrotingen, extract_values)
# Combine the list of data frames into one data frame
result_df <- do.call(bind_rows, result_list)
# Reset row names in the result_df
rownames(result_df) <- NULL
View(result_df)
# Define a function to extract values from each data frame and return a row
extract_values <- function(df) {
row <- data.frame(
zaaknummer = df[6, 26],
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25]
)
return(row)
}
# Use lapply to apply the function to each data frame in the list
result_list <- lapply(begrotingen, extract_values)
# Combine the list of data frames into one data frame
result_df <- do.call(bind_rows, result_list)
# Reset row names in the result_df
rownames(result_df) <- NULL
View(result_df)
# Set column names
colnames(result_df) <- c("zaaknummer", "subtotaal_46", "subtotaal_werkzaamheden", "totaal_generaal")
View(result_df)
# write to excel
write.xlsx(result_df, "C:/Users/Ruben/Documents/05. RCE/begrotingen_schilderwerk/overzicht_begrotingen_schilderwerk.xlsx", rowNames = FALSE)
result_df$subtotaal_46 <- as.numeric(result_df$subtotaal_46)
result_df$totaal_generaal <- as.numeric(result_df$totaal_generaal)
result_df$subtotaal_werkzaamheden <- as.numeric(result_df$subtotaal_werkzaamheden)
# write to excel
write.xlsx(result_df, "C:/Users/Ruben/Documents/05. RCE/begrotingen_schilderwerk/overzicht_begrotingen_schilderwerk.xlsx", rowNames = FALSE)
# Loop through each data frame in the list
for (i in seq_along(begrotingen)) {
# Check if the specified character is present in the specified position
if (nrow(begrotingen[[i]]) >= 6 && ncol(begrotingen[[i]]) >= 26 &&
begrotingen[[i]][6, 26] == "1216833100
") {
# If a match is found, save the data frame as "example" and break out of the loop
example <- begrotingen[[i]]
break
}
}
View(example)
# Loop through each data frame in the list
for (i in seq_along(begrotingen)) {
# Check if the specified character is present in the specified position
if (nrow(begrotingen[[i]]) >= 6 && ncol(begrotingen[[i]]) >= 26 &&
begrotingen[[i]][6, 26] == "12168331
") {
# If a match is found, save the data frame as "example" and break out of the loop
example <- begrotingen[[i]]
break
}
}
View(example)
# Loop through each data frame in the list
for (i in seq_along(begrotingen)) {
# Check if the specified character is present in the specified position
if (nrow(begrotingen[[i]]) >= 6 && ncol(begrotingen[[i]]) >= 26 &&
begrotingen[[i]][6, 26] == "1216825100") {
# If a match is found, save the data frame as "example" and break out of the loop
example <- begrotingen[[i]]
break
}
}
View(example)
# Define a function to extract values from each data frame and return a row
extract_values <- function(df) {
row <- data.frame(
df_name = df_name,
zaaknummer = df[6, 26],
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25]
)
return(row)
}
# Use lapply to apply the function to each data frame in the list
result_list <- lapply(begrotingen, extract_values)
#Define a function to extract values from each data frame and return a row
extract_values <- function(df, df_name) {
row <- c(
df_name = df_name,
zaaknummer = df[6, 26],
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25]
)
return(row)
}
# Use mapply to apply the function to each data frame and its name in the list
result_list <- mapply(extract_values, begrotingen, names(begrotingen), SIMPLIFY = FALSE)
# Combine the list of data frames into one data frame
result_df <- do.call(bind_rows, result_list)
# Reset row names in the result_df
rownames(result_df) <- NULL
# Set column names explicitly
colnames(result_df) <- c("df_name", "zaaknummer", "subtotaal_46", "subtotaal_werkzaamheden", "totaal_generaal")
View(result_df)
# set as numeric
result_df$subtotaal_46 <- as.numeric(result_df$subtotaal_46)
result_df$totaal_generaal <- as.numeric(result_df$totaal_generaal)
result_df$subtotaal_werkzaamheden <- as.numeric(result_df$subtotaal_werkzaamheden)
result_df$df_name <- basename(your_string)
result_df$df_name <- basename(result_df$df_name)
View(result_df)
# Set column names explicitly
colnames(result_df) <- c("excel_file_and_sheet", "zaaknummer", "subtotaal_46", "subtotaal_werkzaamheden", "totaal_generaal")
View(result_df)
result_df$subtotaal_46 <- as.numeric(result_df$subtotaal_46)
result_df$totaal_generaal <- as.numeric(result_df$totaal_generaal)
result_df$subtotaal_werkzaamheden <- as.numeric(result_df$subtotaal_werkzaamheden)
# write to excel
write.xlsx(result_df, "C:/Users/Ruben/Documents/05. RCE/begrotingen_schilderwerk/overzicht_begrotingen_schilderwerk.xlsx", rowNames = FALSE)
# Set the path to your folder
folder_path <- "C:/Users/Ruben/Documents/05. RCE/begrotingen_schilderwerk/files_met_issue"
# Get the list of file names in the folder
file_names <- list.files(folder_path)
# Extract the part after the last "/" in each file path
file_names_after_last_slash <- sapply(strsplit(file_names, "/"), tail, 1)
# Print the result
print(file_names_after_last_slash)
data <- fread("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\cht_labels_clean.csv")
library(data.table)
data <- fread("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\cht_labels_clean.csv")
data$preflabel_simple <- gsub("\\s*\\([^\\)]+\\)\\s*", "", data$prefLabel)
View(data)
data$tail_simple <- gsub("\\s*\\([^\\)]+\\)\\s*", "", data$tail_exactMatch)
View(data)
data$tail_simple <- gsub("_*", "", data$tail_simple)
View(data)
fwrite(data, "C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\cht_labels_clean.csv")
library(data.table)
data <- fread("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\Termen_KC.csv")
data$Term_clean <- stringi::stri_trans_general(data$term)
stri_trans_list()
stringi::stri_trans_list()
data$Term_clean <- stringi::stri_trans_general(data$term, id = "Latin-ASCII")
View(data)
stringi::stri_trans_general(data$term, id = "Latin-ASCII")
data$Term_clean <- stringi::stri_trans_general(data$term, "Latin-ASCII")
data$Term2 <- stringi::stri_trans_general(data$term, "Latin-ASCII")
View(data)
setDT(data)
data[, Term3 := stringi::stri_trans_general(data$term, "Latin-ASCII"),]
View(data)
setDT(data)
library(stringi)
data[, Term3 := stri_trans_general(data$term, "Latin-ASCII"),]
data[, Term4 := stri_trans_general(data$term, "Latin-ASCII"),]
View(data)
data$Term <- as.character(data$Term)
data[, Term4 := stri_trans_general(data$term, "Latin-ASCII"),]
data[, Term5 := stri_trans_general(data$term, "Latin-ASCII"),]
View(data)
data[, Term5 := stri_trans_general(data$Term, "Latin-ASCII"),]
View(data)
data <- fread("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\Termen_KC.csv")
setDT(data)
data$Term <- as.character(data$Term)
data[, Term_clean := stri_trans_general(data$Term, "Latin-ASCII"),]
View(data)
data[, Term_clean := gsub("//", Term_clean),]
data[, Term_clean := gsub("//", " ", Term_clean),]
View(data)
data[, Term_clean := gsub("/", " ", Term_clean),]
View(data)
data[, Term_clean := gsub("\", " ", Term_clean),]
View(data)
View(data)
data[, Term_clean := gsub("//\", " ", Term_clean),]
data[, Term_clean := gsub("/\", " ", Term_clean),]
data[, Term_clean := gsub("\\", " ", Term_clean),]
data[, Term_clean := gsub("/\\", " ", Term_clean),]
data[, Term_clean := gsub("//\", " ", Term_clean),]
data[, Term_clean := gsub("\\", " ", Term_clean),]
data[, Term_clean := gsub("\\", " ", Term_clean),]
data[, Term_clean := gsub("\\\", " ", Term_clean),]
data[, Term_clean := gsub("\\\\", " ", Term_clean),]
data[, Term_clean := gsub("\\", " ", Term_clean, fixed = TRUE),]
fwrite(data, "C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\Termen_KC_clean.csv")
df <- data[!is.na(df$Term_clean) & df$Term_clean != "", ]
df <- data[!is.na(data$Term_clean) & data$Term_clean != "", ]
fwrite(df, "C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\Termen_KC_clean.csv")
write.csv(df, "C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\Termen_KC_clean.csv", fileEncoding = "UTF-8", row.names = FALSE)
locs <- fread("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\updated_Termen_KC_clean.csv")
View(locs)
df2 <- data.frame(lapply(locs, function(x) gsub('"', '', x)))
View(df2)
writexl::write_xlsx(df2, "C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\updated_Termen_KC_clean.xslx")
writexl::write_xlsx(df2, "C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\updated_Termen_KC_clean.xlsx")
writexl::write_xlsx(df2, "C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\updated_Termen_KC_clean.xlsx")
library(data.table)
xlsx::read.xlsx("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch_niet vinden dbpedia.xlsx")
data <- xlsx::read.xlsx("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch_niet vinden dbpedia.xlsx")
data <- xlsx::read.xlsx("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch_niet vinden dbpedia.xlsx". sheetName = "tab1")
data <- xlsx::read.xlsx("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch_niet vinden dbpedia.xlsx", sheetName = "tab1")
data <- xlsx::read.xlsx("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch_niet vinden dbpedia.xlsx", sheetName = "tab1")
better <- xlsx::read.xlsx("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch-translated-dbpediamatch.xlsx", sheetName = "tab1")
setDT(better)
better[closeMatchLabel %in% data$closeMatchLabel, uri := data$uri,]
matches <- better[closeMatchLabel %in% data$closeMatchLabel, ]
matches <- better[data$closeMatchLabel %in% closeMatchLabel, ]
data <- data[!duplicated(data$uri, fromLast = T),]
data2 <- better[closeMatchLabel %in% data$closeMatchLabel, uri := data$uri ]
data2 <- better[closeMatchLabel == data$closeMatchLabel, uri := data$uri ]
data2 <- better[closeMatchLabel == data$closeMatchLabel,  ]
View(data2)
View(better)
data2 <- better[closeMatchLabel = data$closeMatchLabel,  ]
data3 <- merge(data, better, by = "closeMatchLabel", all.x= F, all.y = T)
View(data3)
xlsx::write.xlsx(data3, "C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch-dbpediamatch-checked.xlsx" )
library(jsonlite)
# Your JSON data
json_data <- "C:\\Users\\Ruben\\Documents\\05. RCE\\output.jsonld"
# Parse JSON data
df <- fromJSON(json_data)
# Convert to dataframe
df <- as.data.frame(df)
View(df)
View(df)
View(df)
library(data.table)
setDT(df)
# Your JSON data
json_data <- "C:\\Users\\Ruben\\Documents\\05. RCE\\output.jsonld"
# Parse JSON data
df <- fromJSON(json_data)
# Convert to dataframe
df <- as.data.table(df)
View(df)
df[members.concept.broaders,]
df[, .N, by = members.concept.broaders]
df[, .N, by = members.concept.broaders][order(-N)]
uris <- df[, .N, by = members.concept.broaders][order(-N)]
setDT(df)
View(df)
uris <- df[1,]
View(uris)
View(df[[7]][[1]])
df[[7]][[1]]
adlib <- readxl::read_excel("Export_KC_2024-02-29(2).xlsx", sheet = "Objecten")
setwd("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen")
library(data.table)
library(tidyr)
library(dplyr)
library(zoo)
adlib <- readxl::read_excel("Export_KC_2024-02-29(2).xlsx", sheet = "Objecten")
data <- mutate_all(data, as.character)
data <- mutate_all(adlib, as.character)
long_df <- pivot_longer(data,
cols = -c("Inventarisnr."),
names_to = "Kolom_adlib_export",
values_to = "waarde")
View(long_df)
long_df <- long_df[!is.na(waarde),]
setDT(long_df)
long_df <- long_df[!is.na(waarde),]
koloniaal <- readxl::read_excel("koloniaal_verleden.xlsx", sheet = "Blad1")
koloniaal <- as.data.frame(koloniaal)
koloniaal$preflabel <- tolower(koloniaal$preflabel)
koloniaal$altabel <- tolower(koloniaal$altlabel)
long_df$waarde <- tolower(long_df$waarde)
setDT(long_df)
long_df[waarde %in% koloniaal$preflabel, .N]
long_df[waarde %in% koloniaal$preflabel, .N, by = Inventarisnr.]
top5 <- long_df[waarde == "keramiek" | waarde == "porselein" | waarde == "koper" | waarde == "textiel" | waarde == "katoen",
.N, by = Objectnummer][order(-N)]
top5 <- long_df[waarde == "keramiek" | waarde == "porselein" | waarde == "koper" | waarde == "textiel" | waarde == "katoen",
.N, by = Inventarisnr.][order(-N)]
View(top5)
View(long_df)
View(top5)
long_df[waarde %in% koloniaal$preflabel | waarde %in% koloniaal$altlabel, .N] # 34210 treffers in totaal
long_df[waarde %in% koloniaal$preflabel | waarde %in% koloniaal$altlabel, .N, by = Inventarisnr.] # 23474 objecten met een trefwoord in koloniaal verleden
View(koloniaal)
data <- mutate_all(koloniaal, as.character)
kol_long <- pivot_longer(data,
cols = -c("s"),
names_to = "kolom",
values_to = "label")
View(kol_long)
kol_long <- kol_long[!is.na(label),]
setDT(kol_long)
kol_long <- kol_long[!is.na(label),]
View(kol_long)
kol_long <- kol_long[!duplicated(label), fromlast = TRUE,]
kol_long <- kol_long[!duplicated(label) fromlast = TRUE,]
kol_long <- kol_long[!duplicated(label) fromLast = TRUE,]
kol_long <- kol_long[!duplicated(label), fromLast = TRUE,]
kol_long <- kol_long[!duplicated(kol_long$label, fromLast = TRUE), ]
View(kol_long)
long_df[waarde %in% kol_long$label, .N] # 34281 treffers in totaal
long_df[waarde %in% kol_long$label, .N, by = Inventarisnr.] # 23484 objecten met een trefwoord in koloniaal verleden
long_df <- long_df[waarde == "keramiek" | waarde == "porselein" | waarde == "koper" | waarde == "textiel" | waarde == "katoen",
top5term := TRUE]
View(long_df)
long_df[waarde %in% kol_long$label, match_koloniaal_woordenlijst := TRUE]
long_df[waarde %in% kol_long$label, match_koloniaal_woordenlijst := TRUE]
View(long_df)
long_df <- long_df[is.na(top5term), top5term := FALSE,]
long_df[top5term == FALSE & match_koloniaal_woordenlijst == TRUE, .N, by = Inventarisnr.]
View(long_df)
long_df[waarde == "verband houdend met het koloniaal verleden", .N]
long_df[waarde == "verband houdend met koloniaal verleden", .N]
long_df[waarde == "verband houdend met het koloniale verleden", .N]
long_df[waarde == "verband houdend met het koloniale verleden" & match_koloniaal_woordenlijst == TRUE, .N, by = Inventarisnr.]
thema_matches <- long_df[waarde == "verband houdend met het koloniale verleden", .N, list = Inventarisnr.] # 1771 objecten met dit thema (de handmatige selectie)
thema_matches <- long_df[waarde == "verband houdend met het koloniale verleden", .N, list(Inventarisnr.)] # 1771 objecten met dit thema (de handmatige selectie)
View(thema_matches)
long_df[Inventarisnr. %in% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE, .N, by = Inventarisnr.]
long_df[Inventarisnr. %in% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.]
`%nin%` = Negate(`%in%`)
long_df[Inventarisnr. %in% thema_matches$Inventarisnr. & is.na(match_koloniaal_woordenlijst) & top5term == FALSE, .N, by = Inventarisnr.]
View(long_df)
long_df[Inventarisnr. %in% thema_matches$Inventarisnr. & is.na(match_koloniaal_woordenlijst) , .N, by = Inventarisnr.]
positives <- long_df[Inventarisnr. %in% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, list(Inventarisnr.)]
View(positives)
long_df[Inventarisnr. %in% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.] # 1170 als we de top5 termen buiten beschouwing laten
positives <- long_df[Inventarisnr. %in% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, by = c.(Inventarisnr.)]
positives <- long_df[Inventarisnr. %in% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, list(Inventarisnr.)]
missed_matches <- long_df[Inventarisnr. %in% thema_matches$Inventarisnr. & Inventarisnr. %nin% positives$Inventarisnr. , .N, by = Inventarisnr.]
View(missed_matches)
long_df[Inventarisnr. %in% missed_matches$Inventarisnr., .N, by = waarde]
x <- long_df[Inventarisnr. %in% missed_matches$Inventarisnr., .N, by = waarde]
View(x)
missed_trefwoorden <- long_df[Inventarisnr. %in% missed_matches$Inventarisnr., .N, by = waarde][order(-N)]
View(missed_trefwoorden)
long_df[Inventarisnr. %nin% thema_matches$Inventarisnr. $ match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N]
long_df[Inventarisnr. %nin% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N]
long_df[Inventarisnr. %nin% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.]
long_df[Inventarisnr. %nin% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = waarde][order(-N)]
View(missed_trefwoorden)
extra_objecten <- long_df[Inventarisnr. %nin% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.][order(-N)]
View(extra_objecten)
View(long_df)
View(extra_objecten)
View(long_df)
View(adlib)
export <- readxl::read_excel("vc-sporen-van-slavernij-edm-strict-records-xml.xlsx")
View(export)
export <- readxl::read_excel("vc-sporen-van-slavernij-edm-strict-records-xml.xlsx")
setDT(export)
export$id <- basename(export$`rdf:RDF - edm:ProvidedCHO - rdf:about`)
#export_objects <- export[, list(`rdf:RDF - edm:ProvidedCHO - dc:identifier`)]
#export_objects <- export_objects[!is.na(`rdf:RDF - edm:ProvidedCHO - dc:identifier`)]
# Fill missing values in the first column
export$`rdf:RDF - edm:ProvidedCHO - rdf:about` <- na.locf(export$`rdf:RDF - edm:ProvidedCHO - rdf:about`, na.rm = FALSE)
export$id <- basename(export$`rdf:RDF - edm:ProvidedCHO - rdf:about`)
View(export)
long_df[Inventarisnr. %in% export$id, .N]
long_df[Inventarisnr. %in% export$id, .N, by = Inventarisnr.]
long_df[Inventarisnr. %in% export$id & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.]
cnmatches <- long_df[Inventarisnr. %in% export$id & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.]
View(cnmatches)
cnmatches <- long_df[Inventarisnr. %nin% export$id & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.]
View(cnmatches)
View(long_df)
extra_objecten[Inventarisnr. %nin cnmatches$Inventarisnr., .N]
extra_objecten[Inventarisnr. %nin% cnmatches$Inventarisnr., .N]
gekke <- extra_objecten[Inventarisnr. %nin% cnmatches$Inventarisnr., .N]
gekke <- extra_objecten[Inventarisnr. %nin% cnmatches$Inventarisnr., .N, by = Inventarisnr.]
View(gekke)
View(long_df)
View(gekke)
print(gekke$Inventarisnr.)
cnmatches <- long_df[Inventarisnr. %in% export$id & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.]
long_df[Inventarisnr. %in% export$id & match_koloniaal_woordenlijst == TRUE, .N, by = Inventarisnr.] # 1356 gevonden via koloniaal verleden (incl top 5!)
long_df[Inventarisnr. %in% export$id & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.] # 1170 als we de top5 termen buiten beschouwing laten
View(gekke)
View(extra_objecten)
View(cnmatches)
View(thema_matches)
long_df[Inventarisnr. %in% export$id $ Inventarisnr.%nin% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.] # 1170 als we de top5 termen buiten beschouwing laten
long_df[Inventarisnr. %in% export$id & Inventarisnr.%nin% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.] # 1170 als we de top5 termen buiten beschouwing laten
View(adlib)
gekke2 <- long_df[Inventarisnr. %in% export$id & Inventarisnr.%nin% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.] # 1170 als we de top5 termen buiten beschouwing laten
View(gekke2)
View(thema_matches)
View(positives)
View(gekke)
View(long_df)
long_df[Inventarisnr. %in% export$id, .N]
long_df[Inventarisnr. %in% export$id, .N, by = Inventarisnr.]
long_df[Inventarisnr. %nin% export$id & waarde == "verband houdend met het koloniale verleden" , .N, by = Inventarisnr.]
View(long_df)
View(export)
# welke hebben we daarvan gevonden?
long_df[Inventarisnr. %nin% export$id & waarde == "verband houdend met het koloniale verleden" & match_koloniaal_woordenlijst == TRUE & top5term == FALSE , .N, by = Inventarisnr.]
# er zijn dus ook nog 97 objecten die WEL in Adlib koloniaal zijn, maar dan weer niet op CN.nl staan!
long_df[Inventarisnr. %nin% export$id & waarde == "verband houdend met het koloniale verleden" , .N, by = Inventarisnr.]
# welke hebben we daarvan gevonden? > 0
long_df[ waarde == "verband houdend met het koloniale verleden" & match_koloniaal_woordenlijst == TRUE & top5term == FALSE , .N, by = Inventarisnr.]
View(long_df)
long_df[Inventarisnr. %in% thema_matches$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.] # 1170 als we de top5 termen buiten beschouwing laten
long_df[ match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.] # 1170 als we de top5 termen buiten beschouwing laten
# welke hebben we daarvan gevonden? > 0
long_df[waarde == "verband houdend met het koloniale verleden" & match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.]
# welke hebben we daarvan gevonden? > 0
long_df[ match_koloniaal_woordenlijst == TRUE & top5term == FALSE, .N, by = Inventarisnr.]
# er zijn dus ook nog 97 objecten die WEL in Adlib koloniaal zijn, maar dan weer niet op CN.nl staan!
laatste <- long_df[Inventarisnr. %nin% export$id & waarde == "verband houdend met het koloniale verleden" , .N, by = Inventarisnr.]
# welke hebben we daarvan gevonden? > 0
long_df[Inventarisnr.%in% laatste$Inventarisnr. & match_koloniaal_woordenlijst == TRUE & top5term == FALSE , .N, by = Inventarisnr.]
