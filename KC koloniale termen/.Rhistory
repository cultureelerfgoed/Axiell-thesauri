example <- begrotingen[[i]]
break
}
}
View(example)
# Loop through each data frame in the list
for (i in seq_along(begrotingen)) {
# Check if the specified character is present in the specified position
if (nrow(begrotingen[[i]]) >= 6 && ncol(begrotingen[[i]]) >= 26 &&
begrotingen[[i]][6, 26] == "1208133") {
# If a match is found, save the data frame as "example" and break out of the loop
example <- begrotingen[[i]]
break
}
}
View(example)
# Subtotaal van alle werkzaamheden
random_df[2106,8]
# Subtotaal van alle werkzaamheden
random_df[2106,11]
# Subtotaal van alle werkzaamheden
random_df[2106,25]
# Subtotaal van alle werkzaamheden
random_df[2105,25]
# Subtotaal van alle werkzaamheden
example[2106,11]
# subtotaal 46
example[1657, 11] # 10511
# subtotaal 46
example[1657, 25] # 10511
random_df[1657,25]
# Subtotaal van alle werkzaamheden
example[2106,25]
# Subtotaal van alle werkzaamheden
example[2180,25] # 175,496
# Subtotaal van alle werkzaamheden
example[21,25] # 175,496
# Subtotaal van alle werkzaamheden
example[1657,25] # 175,496
# subtotaal 46
example[1657, 25] # 10511
# Subtotaal van alle werkzaamheden
example[2107,25] # 175,496
# TOTAAL GENERAAL
example[2180,25]
# zaaknummer
example[6,26]
### loop through all sheets
# Initialize an empty list to store the results
result_list <- list()
# Iterate through each data frame in the list
for (i in 1:length(begrotingen)) {
df <- begrotingen[[i]]
# Create a new data frame for each iteration
dataframe <- data.frame(
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25],
zaaknummer = df[6, 26]
)
# Store the result in the list
result_list[[i]] <- dataframe
}
View(result_list)
library(dplyr)
### loop through all sheets
# Initialize an empty list to store the results
result_list <- list()
# Iterate through each data frame in the list
for (i in 1:length(begrotingen)) {
df <- begrotingen[[i]]
# Create a new data frame for each iteration
dataframe <- data.frame(
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25],
zaaknummer = df[6, 26]
)
# Bind the row to the result_df
result_df <- bind_rows(result_df, row)
}
result_df <- NULL
result_df <- dataframe()
result_df <- data.frame()
# Iterate through each data frame in the list
for (i in 1:length(begrotingen)) {
df <- begrotingen[[i]]
# Create a new data frame for each iteration
dataframe <- data.frame(
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25],
zaaknummer = df[6, 26]
)
# Bind the row to the result_df
result_df <- bind_rows(result_df, row)
}
extract_values <- function(df) {
row <- data.frame(
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25],
zaaknummer = df[6, 26]
)
return(row)
}
# Use lapply to apply the function to each data frame in the list
result_list <- lapply(begrotingen, extract_values)
# Combine the list of data frames into one data frame
result_df <- do.call(bind_rows, result_list)
# Reset row names in the result_df
rownames(result_df) <- NULL
View(result_df)
# Define a function to extract values from each data frame and return a row
extract_values <- function(df) {
row <- data.frame(
zaaknummer = df[6, 26],
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25]
)
return(row)
}
# Use lapply to apply the function to each data frame in the list
result_list <- lapply(begrotingen, extract_values)
# Combine the list of data frames into one data frame
result_df <- do.call(bind_rows, result_list)
# Reset row names in the result_df
rownames(result_df) <- NULL
View(result_df)
# Set column names
colnames(result_df) <- c("zaaknummer", "subtotaal_46", "subtotaal_werkzaamheden", "totaal_generaal")
View(result_df)
# write to excel
write.xlsx(result_df, "C:/Users/Ruben/Documents/05. RCE/begrotingen_schilderwerk/overzicht_begrotingen_schilderwerk.xlsx", rowNames = FALSE)
result_df$subtotaal_46 <- as.numeric(result_df$subtotaal_46)
result_df$totaal_generaal <- as.numeric(result_df$totaal_generaal)
result_df$subtotaal_werkzaamheden <- as.numeric(result_df$subtotaal_werkzaamheden)
# write to excel
write.xlsx(result_df, "C:/Users/Ruben/Documents/05. RCE/begrotingen_schilderwerk/overzicht_begrotingen_schilderwerk.xlsx", rowNames = FALSE)
# Loop through each data frame in the list
for (i in seq_along(begrotingen)) {
# Check if the specified character is present in the specified position
if (nrow(begrotingen[[i]]) >= 6 && ncol(begrotingen[[i]]) >= 26 &&
begrotingen[[i]][6, 26] == "1216833100
") {
# If a match is found, save the data frame as "example" and break out of the loop
example <- begrotingen[[i]]
break
}
}
View(example)
# Loop through each data frame in the list
for (i in seq_along(begrotingen)) {
# Check if the specified character is present in the specified position
if (nrow(begrotingen[[i]]) >= 6 && ncol(begrotingen[[i]]) >= 26 &&
begrotingen[[i]][6, 26] == "12168331
") {
# If a match is found, save the data frame as "example" and break out of the loop
example <- begrotingen[[i]]
break
}
}
View(example)
# Loop through each data frame in the list
for (i in seq_along(begrotingen)) {
# Check if the specified character is present in the specified position
if (nrow(begrotingen[[i]]) >= 6 && ncol(begrotingen[[i]]) >= 26 &&
begrotingen[[i]][6, 26] == "1216825100") {
# If a match is found, save the data frame as "example" and break out of the loop
example <- begrotingen[[i]]
break
}
}
View(example)
# Define a function to extract values from each data frame and return a row
extract_values <- function(df) {
row <- data.frame(
df_name = df_name,
zaaknummer = df[6, 26],
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25]
)
return(row)
}
# Use lapply to apply the function to each data frame in the list
result_list <- lapply(begrotingen, extract_values)
#Define a function to extract values from each data frame and return a row
extract_values <- function(df, df_name) {
row <- c(
df_name = df_name,
zaaknummer = df[6, 26],
subtotaal_46 = df[1657, 25],
subtotaal_werkzaamheden = df[2107, 25],
totaal_generaal = df[2180, 25]
)
return(row)
}
# Use mapply to apply the function to each data frame and its name in the list
result_list <- mapply(extract_values, begrotingen, names(begrotingen), SIMPLIFY = FALSE)
# Combine the list of data frames into one data frame
result_df <- do.call(bind_rows, result_list)
# Reset row names in the result_df
rownames(result_df) <- NULL
# Set column names explicitly
colnames(result_df) <- c("df_name", "zaaknummer", "subtotaal_46", "subtotaal_werkzaamheden", "totaal_generaal")
View(result_df)
# set as numeric
result_df$subtotaal_46 <- as.numeric(result_df$subtotaal_46)
result_df$totaal_generaal <- as.numeric(result_df$totaal_generaal)
result_df$subtotaal_werkzaamheden <- as.numeric(result_df$subtotaal_werkzaamheden)
result_df$df_name <- basename(your_string)
result_df$df_name <- basename(result_df$df_name)
View(result_df)
# Set column names explicitly
colnames(result_df) <- c("excel_file_and_sheet", "zaaknummer", "subtotaal_46", "subtotaal_werkzaamheden", "totaal_generaal")
View(result_df)
result_df$subtotaal_46 <- as.numeric(result_df$subtotaal_46)
result_df$totaal_generaal <- as.numeric(result_df$totaal_generaal)
result_df$subtotaal_werkzaamheden <- as.numeric(result_df$subtotaal_werkzaamheden)
# write to excel
write.xlsx(result_df, "C:/Users/Ruben/Documents/05. RCE/begrotingen_schilderwerk/overzicht_begrotingen_schilderwerk.xlsx", rowNames = FALSE)
# Set the path to your folder
folder_path <- "C:/Users/Ruben/Documents/05. RCE/begrotingen_schilderwerk/files_met_issue"
# Get the list of file names in the folder
file_names <- list.files(folder_path)
# Extract the part after the last "/" in each file path
file_names_after_last_slash <- sapply(strsplit(file_names, "/"), tail, 1)
# Print the result
print(file_names_after_last_slash)
data <- fread("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\cht_labels_clean.csv")
library(data.table)
data <- fread("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\cht_labels_clean.csv")
data$preflabel_simple <- gsub("\\s*\\([^\\)]+\\)\\s*", "", data$prefLabel)
View(data)
data$tail_simple <- gsub("\\s*\\([^\\)]+\\)\\s*", "", data$tail_exactMatch)
View(data)
data$tail_simple <- gsub("_*", "", data$tail_simple)
View(data)
fwrite(data, "C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\cht_labels_clean.csv")
library(data.table)
data <- fread("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\Termen_KC.csv")
data$Term_clean <- stringi::stri_trans_general(data$term)
stri_trans_list()
stringi::stri_trans_list()
data$Term_clean <- stringi::stri_trans_general(data$term, id = "Latin-ASCII")
View(data)
stringi::stri_trans_general(data$term, id = "Latin-ASCII")
data$Term_clean <- stringi::stri_trans_general(data$term, "Latin-ASCII")
data$Term2 <- stringi::stri_trans_general(data$term, "Latin-ASCII")
View(data)
setDT(data)
data[, Term3 := stringi::stri_trans_general(data$term, "Latin-ASCII"),]
View(data)
setDT(data)
library(stringi)
data[, Term3 := stri_trans_general(data$term, "Latin-ASCII"),]
data[, Term4 := stri_trans_general(data$term, "Latin-ASCII"),]
View(data)
data$Term <- as.character(data$Term)
data[, Term4 := stri_trans_general(data$term, "Latin-ASCII"),]
data[, Term5 := stri_trans_general(data$term, "Latin-ASCII"),]
View(data)
data[, Term5 := stri_trans_general(data$Term, "Latin-ASCII"),]
View(data)
data <- fread("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\Termen_KC.csv")
setDT(data)
data$Term <- as.character(data$Term)
data[, Term_clean := stri_trans_general(data$Term, "Latin-ASCII"),]
View(data)
data[, Term_clean := gsub("//", Term_clean),]
data[, Term_clean := gsub("//", " ", Term_clean),]
View(data)
data[, Term_clean := gsub("/", " ", Term_clean),]
View(data)
data[, Term_clean := gsub("\", " ", Term_clean),]
View(data)
View(data)
data[, Term_clean := gsub("//\", " ", Term_clean),]
data[, Term_clean := gsub("/\", " ", Term_clean),]
data[, Term_clean := gsub("\\", " ", Term_clean),]
data[, Term_clean := gsub("/\\", " ", Term_clean),]
data[, Term_clean := gsub("//\", " ", Term_clean),]
data[, Term_clean := gsub("\\", " ", Term_clean),]
data[, Term_clean := gsub("\\", " ", Term_clean),]
data[, Term_clean := gsub("\\\", " ", Term_clean),]
data[, Term_clean := gsub("\\\\", " ", Term_clean),]
data[, Term_clean := gsub("\\", " ", Term_clean, fixed = TRUE),]
fwrite(data, "C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\Termen_KC_clean.csv")
df <- data[!is.na(df$Term_clean) & df$Term_clean != "", ]
df <- data[!is.na(data$Term_clean) & data$Term_clean != "", ]
fwrite(df, "C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\Termen_KC_clean.csv")
write.csv(df, "C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\Termen_KC_clean.csv", fileEncoding = "UTF-8", row.names = FALSE)
locs <- fread("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\updated_Termen_KC_clean.csv")
View(locs)
df2 <- data.frame(lapply(locs, function(x) gsub('"', '', x)))
View(df2)
writexl::write_xlsx(df2, "C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\updated_Termen_KC_clean.xslx")
writexl::write_xlsx(df2, "C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\updated_Termen_KC_clean.xlsx")
writexl::write_xlsx(df2, "C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen\\updated_Termen_KC_clean.xlsx")
library(data.table)
xlsx::read.xlsx("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch_niet vinden dbpedia.xlsx")
data <- xlsx::read.xlsx("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch_niet vinden dbpedia.xlsx")
data <- xlsx::read.xlsx("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch_niet vinden dbpedia.xlsx". sheetName = "tab1")
data <- xlsx::read.xlsx("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch_niet vinden dbpedia.xlsx", sheetName = "tab1")
data <- xlsx::read.xlsx("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch_niet vinden dbpedia.xlsx", sheetName = "tab1")
better <- xlsx::read.xlsx("C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch-translated-dbpediamatch.xlsx", sheetName = "tab1")
setDT(better)
better[closeMatchLabel %in% data$closeMatchLabel, uri := data$uri,]
matches <- better[closeMatchLabel %in% data$closeMatchLabel, ]
matches <- better[data$closeMatchLabel %in% closeMatchLabel, ]
data <- data[!duplicated(data$uri, fromLast = T),]
data2 <- better[closeMatchLabel %in% data$closeMatchLabel, uri := data$uri ]
data2 <- better[closeMatchLabel == data$closeMatchLabel, uri := data$uri ]
data2 <- better[closeMatchLabel == data$closeMatchLabel,  ]
View(data2)
View(better)
data2 <- better[closeMatchLabel = data$closeMatchLabel,  ]
data3 <- merge(data, better, by = "closeMatchLabel", all.x= F, all.y = T)
View(data3)
xlsx::write.xlsx(data3, "C:\\Users\\Ruben\\Documents\\05. RCE\\dbpedia_fix\\closeMatch-dbpediamatch-checked.xlsx" )
library(data.table)
# analyze koppeling termen Koloniaal Verleden aan thesaurustermen KC
system.time({
library(data.table)
library(tidyr)
library(dplyr)
library(zoo)
setwd("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen")
data <- readxl::read_excel("EXPORT_Adlib_Termen-KC-reconciled_2.xlsx", sheet = "Blad1")
setdt(data)
# switch to long format to get all trefwoorden en onderwerpen per record
data <- mutate_all(data, as.character)
long_df <- pivot_longer(data,
cols = -c("Objectnummer"),
names_to = "Variable",
values_to = "Value")
# remove NA
setDT(long_df)
long_df <- long_df[!is.na(Value),]
long_df <- as.data.frame(long_df)
# load koloniaal verleden preflabels
koloniaal <- readxl::read_excel("koloniaal_verleden.xlsx", sheet = "Blad1")
koloniaal <- as.data.frame(koloniaal)
koloniaal$preflabel <- tolower(koloniaal$preflabel)
koloniaal$altabel <- tolower(koloniaal$altlabel)
# select colonial terms from Value
setDT(long_df)
long_df$Value <- tolower(long_df$Value)
long_df[Value %in% koloniaal$preflabel, .N]
long_df[Value %in% koloniaal$preflabel, colonial := TRUE]
long_df[Value %in% koloniaal$altlabel, colonial := TRUE]
# count koloniaal verleden matches by koloniaal term
results <- long_df[!is.na(colonial), .N, by = Value][order(-N)]
# give objects where at least one koloniaal verleden term is matched
results2 <- long_df[colonial == TRUE, .N, by = Objectnummer][order(-N)]
# NB why do i miss objectnumbers between original and results2?
#  because there is no match term included in the EXPORT yet...
`%nin%` = Negate(`%in%`)
missings <- long_df[Objectnummer %nin% results2$Objectnummer, list(unique(Objectnummer)) ]
# let's try it without the top-5 generic terms from koloniaal verleden
results3 <- long_df[colonial == TRUE & Value != "keramiek" & Value != "porselein" & Value != "koper" & Value != "textiel" & Value != "katoen",
.N, by = Objectnummer][order(-N)]
# to do:
# 1: top5 plus ten minste 1 ander trefwoord
top5 <- long_df[Value == "keramiek" | Value == "porselein" | Value == "koper" | Value == "textiel" | Value == "katoen",
.N, by = Objectnummer][order(-N)]
merged <- merge(top5, results3, by = "Objectnummer", all.x = TRUE, all.y =  TRUE)
setnames(merged, "N.x", "top5_trefwoorden")
setnames(merged, "N.y", "overige_trefwoorden")
# alleen trefwoorden wanneer ze niet top-5 zijn of samen met top-5 voorkomen
#results4 <- merged[!is.na(overige_trefwoorden) & is.na(top5_trefwoorden), ]
#subset <- results3[Objectnummer %in% top5$Objectnummer, ]
#results4[Objectnummer %in% results3$Objectnummer, .N]
# subset plus results4 = results3...
#merg2 <- merge(subset, results4, by = "Objectnummer", all.x = T, all.y =  T)
#merg2[Objectnummer %in% results3$Objectnummer, .N]
# 2: lijst uit 1 controleren met de ca. 1600 op Cn.nl
# methode controleren met handmatig en wat je mist aanvullen aan trefwoorden aan koloniaal verleden
# wat voor percentage overlap is voldoende om deze methode aan te raden?
export <- readxl::read_excel("vc-sporen-van-slavernij-edm-strict-records-xml.xlsx")
setDT(export)
export$id <- basename(export$`rdf:RDF - edm:ProvidedCHO - rdf:about`)
#export_objects <- export[, list(`rdf:RDF - edm:ProvidedCHO - dc:identifier`)]
#export_objects <- export_objects[!is.na(`rdf:RDF - edm:ProvidedCHO - dc:identifier`)]
# Fill missing values in the first column
export$`rdf:RDF - edm:ProvidedCHO - rdf:about` <- na.locf(export$`rdf:RDF - edm:ProvidedCHO - rdf:about`, na.rm = FALSE)
export$id <- basename(export$`rdf:RDF - edm:ProvidedCHO - rdf:about`)
# get objects from collectiennl that are not matched
export[id %nin% results3$Objectnummer, .N, by = id ] # 636 objecten niet gevonden (wel in cn.nl, niet in deze resultaten)
nomatch <- export[id %nin% results3$Objectnummer, ]
# see which terms we might have missed
missedsubjects <- nomatch[, .N, list(`rdf:RDF - edm:ProvidedCHO - dc:subject`)][order(-N)]
missedmaterials <- nomatch[, .N, list(`rdf:RDF - edm:ProvidedCHO - dcterms:medium`)][order(-N)]
missedtypes <- nomatch[, .N, list(`rdf:RDF - edm:ProvidedCHO - dc:type`)][order(-N)]
# did we find extra items from the shortlist?
results3[Objectnummer %in% export$id] # 1063 overlap (zowel in cn.nl als deze resultaten)
bonus <- results3[Objectnummer %nin% export$id] # 1544 objecten extra gevonden (niet in cn.nl, wel in deze resultaten)
})
# analyze koppeling termen Koloniaal Verleden aan thesaurustermen KC
system.time({
setDTthreads(threads = 1)
library(data.table)
library(tidyr)
library(dplyr)
library(zoo)
setwd("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\KC koloniale termen")
data <- readxl::read_excel("EXPORT_Adlib_Termen-KC-reconciled_2.xlsx", sheet = "Blad1")
setdt(data)
# switch to long format to get all trefwoorden en onderwerpen per record
data <- mutate_all(data, as.character)
long_df <- pivot_longer(data,
cols = -c("Objectnummer"),
names_to = "Variable",
values_to = "Value")
# remove NA
setDT(long_df)
long_df <- long_df[!is.na(Value),]
long_df <- as.data.frame(long_df)
# load koloniaal verleden preflabels
koloniaal <- readxl::read_excel("koloniaal_verleden.xlsx", sheet = "Blad1")
koloniaal <- as.data.frame(koloniaal)
koloniaal$preflabel <- tolower(koloniaal$preflabel)
koloniaal$altabel <- tolower(koloniaal$altlabel)
# select colonial terms from Value
setDT(long_df)
long_df$Value <- tolower(long_df$Value)
long_df[Value %in% koloniaal$preflabel, .N]
long_df[Value %in% koloniaal$preflabel, colonial := TRUE]
long_df[Value %in% koloniaal$altlabel, colonial := TRUE]
# count koloniaal verleden matches by koloniaal term
results <- long_df[!is.na(colonial), .N, by = Value][order(-N)]
# give objects where at least one koloniaal verleden term is matched
results2 <- long_df[colonial == TRUE, .N, by = Objectnummer][order(-N)]
# NB why do i miss objectnumbers between original and results2?
#  because there is no match term included in the EXPORT yet...
`%nin%` = Negate(`%in%`)
missings <- long_df[Objectnummer %nin% results2$Objectnummer, list(unique(Objectnummer)) ]
# let's try it without the top-5 generic terms from koloniaal verleden
results3 <- long_df[colonial == TRUE & Value != "keramiek" & Value != "porselein" & Value != "koper" & Value != "textiel" & Value != "katoen",
.N, by = Objectnummer][order(-N)]
# to do:
# 1: top5 plus ten minste 1 ander trefwoord
top5 <- long_df[Value == "keramiek" | Value == "porselein" | Value == "koper" | Value == "textiel" | Value == "katoen",
.N, by = Objectnummer][order(-N)]
merged <- merge(top5, results3, by = "Objectnummer", all.x = TRUE, all.y =  TRUE)
setnames(merged, "N.x", "top5_trefwoorden")
setnames(merged, "N.y", "overige_trefwoorden")
# alleen trefwoorden wanneer ze niet top-5 zijn of samen met top-5 voorkomen
#results4 <- merged[!is.na(overige_trefwoorden) & is.na(top5_trefwoorden), ]
#subset <- results3[Objectnummer %in% top5$Objectnummer, ]
#results4[Objectnummer %in% results3$Objectnummer, .N]
# subset plus results4 = results3...
#merg2 <- merge(subset, results4, by = "Objectnummer", all.x = T, all.y =  T)
#merg2[Objectnummer %in% results3$Objectnummer, .N]
# 2: lijst uit 1 controleren met de ca. 1600 op Cn.nl
# methode controleren met handmatig en wat je mist aanvullen aan trefwoorden aan koloniaal verleden
# wat voor percentage overlap is voldoende om deze methode aan te raden?
export <- readxl::read_excel("vc-sporen-van-slavernij-edm-strict-records-xml.xlsx")
setDT(export)
export$id <- basename(export$`rdf:RDF - edm:ProvidedCHO - rdf:about`)
#export_objects <- export[, list(`rdf:RDF - edm:ProvidedCHO - dc:identifier`)]
#export_objects <- export_objects[!is.na(`rdf:RDF - edm:ProvidedCHO - dc:identifier`)]
# Fill missing values in the first column
export$`rdf:RDF - edm:ProvidedCHO - rdf:about` <- na.locf(export$`rdf:RDF - edm:ProvidedCHO - rdf:about`, na.rm = FALSE)
export$id <- basename(export$`rdf:RDF - edm:ProvidedCHO - rdf:about`)
# get objects from collectiennl that are not matched
export[id %nin% results3$Objectnummer, .N, by = id ] # 636 objecten niet gevonden (wel in cn.nl, niet in deze resultaten)
nomatch <- export[id %nin% results3$Objectnummer, ]
# see which terms we might have missed
missedsubjects <- nomatch[, .N, list(`rdf:RDF - edm:ProvidedCHO - dc:subject`)][order(-N)]
missedmaterials <- nomatch[, .N, list(`rdf:RDF - edm:ProvidedCHO - dcterms:medium`)][order(-N)]
missedtypes <- nomatch[, .N, list(`rdf:RDF - edm:ProvidedCHO - dc:type`)][order(-N)]
# did we find extra items from the shortlist?
results3[Objectnummer %in% export$id] # 1063 overlap (zowel in cn.nl als deze resultaten)
bonus <- results3[Objectnummer %nin% export$id] # 1544 objecten extra gevonden (niet in cn.nl, wel in deze resultaten)
})
system()
# Query processor information
processor_info <- system("sysctl -a | grep machdep.cpu", intern = TRUE)
# Print processor information
print(processor_info)
# Query processor information
processor_info <- system("sysctl -a | grep machdep.cpu", intern = TRUE)
# Execute systeminfo command and capture output
system_info <- system("systeminfo", intern = TRUE)
# Filter processor-related information
processor_info <- grep("Processor", system_info, value = TRUE)
# Print processor information
print(processor_info)
# Print processor information
print(system_info)
# Execute PowerShell command and capture output
processor_info <- system("powershell Get-WmiObject Win32_Processor | Select-Object Name, NumberOfCores, NumberOfLogicalProcessors, MaxClockSpeed", intern = TRUE)
# Print processor information
print(processor_info)
data <- read.csv(url("https://api.linkeddata.cultureelerfgoed.nl/queries/ruben-schalk/get-rijkmonumenten/1/run.csv?page=1&pageSize=10000"))
page = 1 # counts how many pages you queried so far
cont = TRUE # tells the loop to continue
while(cont && page < 100){ # prevents an endless loop; adjust the maximum number of pages based on your dataset's size.
page = page+1
n1 = nrow(data) # how many rows existed before
data <- rbind(data, read.csv(url(sprintf("https://api.linkeddata.cultureelerfgoed.nl/queries/ruben-schalk/get-rijkmonumenten/1/run.csv?page=%i&pageSize=10000", page)))) # queries the next page
n2 = nrow(data) # how many rows exist after
cont = (n2 - n1) == 10000 # checks whether the next query will pick any more rows; if not, the loop stops
#print(page) # if you want to follow what's going on
}
View(data)
View(data)
setDT(data)
data[, .N, by = nummer][order(-N)]
