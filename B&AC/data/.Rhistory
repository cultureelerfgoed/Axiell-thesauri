library(spacyr)
spacy_install("nl")
library(spacyr)
spacy_install("nl")
library(jsonlite)
library(rjson)
library(data.table)
library(httr)
library(curl)
library(tibble)
setwd("C:\\Users\\Ruben\\Documents\\05. RCE")
url <- "https://api.linkeddata.cultureelerfgoed.nl/datasets/ruben-schalk/cht-dump/services/cht-dump/sparql"
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT ?hostname (count(?term) as ?number_of_links) WHERE {
SERVICE <http://vocab.getty.edu/sparql> {
?term a gtv:Concept .
?term skos:exactMatch ?exactmatch
}
FILTER(!regex(?exactmatch, "getty"))
bind(strbefore(strafter(str(?exactmatch),"//"),"/") as ?hostname)
}
ORDER BY DESC(?number_of_links)'
)
response <- POST(url, body = body, encode = "json")
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT ?hostname (count(?term) as ?number_of_links) WHERE {
SERVICE <http://vocab.getty.edu/sparql> {
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
'
)
response <- POST(url, body = body, encode = "json")
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
url <- "https://api.linkeddata.cultureelerfgoed.nl/datasets/ruben-schalk/cht-dump/services/cht-dump/sparql"
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT ?hostname (count(?term) as ?number_of_links) WHERE {
SERVICE <http://vocab.getty.edu/sparql> {
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
'
)
url <- "https://api.linkeddata.cultureelerfgoed.nl/datasets/ruben-schalk/cht-dump/services/cht-dump/sparql"
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
SERVICE <http://vocab.getty.edu/sparql> {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
}'
)
response <- POST(url, body = body, encode = "json")
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
SERVICE <http://vocab.getty.edu/sparql> {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
}}'
)
response <- POST(url, body = body, encode = "json")
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
SERVICE <http://vocab.getty.edu/sparql> {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
}
}'
)
response <- POST(url, body = body, encode = "json")
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
url <- "http://vocab.getty.edu/sparql"
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
}'
)
response <- POST(url, body = body, encode = "json")
response <- POST(url, body = body, encode = "json")
content <- content(response, "parsed")
content <- content(response, "raw")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
content <- content(response, "text")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
response <- POST(url, body = body, encode = "json", content_type("application/sparql-query"))
content <- content(response, "text")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
body <- list(
format = "json",
query = 'PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX gtv: <http://vocab.getty.edu/ontology#>
SELECT (count(distinct(?term)) as ?concept) (count(?exactmatch) as ?relaties) WHERE {
?term a gtv:Concept .
optional{    ?term skos:exactMatch ?exactmatch }
}'
)
response <- POST(url, body = body, encode = "json", content_type("application/sparql-query"))
response <- POST(url, body = body, encode = "json", content_type("application/sparql-query"))
content <- content(response, "text")
content <- content(response, "text")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
url <- "https://api.data.muziekweb.nl/datasets/MuziekwebOrganization/Muziekweb/services/Muziekweb/sparql"
query <- "PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?hostname (count(?hostname) as ?unique_domains)
WHERE {
?term owl:sameAs ?obj .
bind(strbefore(strafter(str(?obj), '://'), '/') as ?hostname)
FILTER(?hostname != '')
}
ORDER BY DESC(?unique_domains)
LIMIT 20"
response <- POST(url, body = list(query = query), encode = "json")
# retrieve response and convert to data.frame
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
url <- "https://api.data.muziekweb.nl/datasets/MuziekwebOrganization/Muziekweb/services/Muziekweb/sparql"
query <- "PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (count(distinct(?term) as ?n) (count(?obj) as ?unique_domains)
WHERE {
?term owl:sameAs ?obj .
bind(strbefore(strafter(str(?obj), '://'), '/') as ?hostname)
FILTER(?hostname != '')
}
#ORDER BY DESC(?unique_domains)
LIMIT 20"
response <- POST(url, body = list(query = query), encode = "json")
# retrieve response and convert to data.frame
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
print(df)
url <- "https://api.data.muziekweb.nl/datasets/MuziekwebOrganization/Muziekweb/services/Muziekweb/sparql"
query <- "PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (count(distinct(?term)) as ?n) (count(?obj) as ?unique_domains)
WHERE {
?term owl:sameAs ?obj .
bind(strbefore(strafter(str(?obj), '://'), '/') as ?hostname)
FILTER(?hostname != '')
}
#ORDER BY DESC(?unique_domains)
LIMIT 20"
response <- POST(url, body = list(query = query), encode = "json")
# retrieve response and convert to data.frame
content <- content(response, "parsed")
df <- as.data.frame(do.call(rbind, lapply(content, as.data.frame)))
print(df)
# Load required libraries
library(stringdist)
library(dplyr)
library(data.table)
library(foreach)
library(doParallel)
library(progress)
library(textTinyR)
setwd("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\data")
# load B&AC thesaurus
thesaurus <- fread("Thesarus-export(B&AC).csv", encoding = "UTF-8")
setDT(thesaurus)
#x <- thesaurus[sample(nrow(thesaurus), 10000), ]
#concepts <- x$term
# term status
thesaurus[, .N, by = term.status]
setwd("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\data\\B&AC")
# load B&AC thesaurus
thesaurus <- fread("Thesarus-export(B&AC).csv", encoding = "UTF-8")
setwd("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\B&AC\\B&AC")
setwd("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\B&AC\\B&AC")
setwd("C:\\Users\\Ruben\\Documents\\05. RCE\\Axiell thesauri\\B&AC\\data")
# load B&AC thesaurus
thesaurus <- fread("Thesarus-export(B&AC).csv", encoding = "UTF-8")
setDT(thesaurus)
View(thesaurus)
setDT(thesaurus)
thesaurus[grepl("Utrecht", term),]
thesaurus[grepl("Utrecht", term), list(term)]
thesaurus[grepl("textiel", term), list(term)]
thesaurus[grepl("glas", term), list(term)]
thesaurus[grepl("glas", term), .N, list(term)][order(-N)]
thesaurus[grepl("aardewerk", term), .N, list(term)][order(-N)]
